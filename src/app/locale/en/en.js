import ChatGatewayProvider
  from '@webitel/ui-sdk/src/enums/ChatGatewayProvider/ChatGatewayProvider.enum.js';
import { WebitelContactsTimelineEventType } from 'webitel-sdk';
import AccessMode
  from '../../../modules/contacts/modules/permissions/enums/AccessMode.enum.js';
import TimelineTaskStatusEnum
  from '../../../modules/contacts/modules/timeline/enums/TimelineTaskStatus.enum.js';

import CrmSections from '@webitel/ui-sdk/src/enums/WebitelApplications/CrmSections.enum';
import CrmConfigurationSections from '@webitel/ui-sdk/src/enums/WebitelApplications/CrmConfigurationSections.enum';

export default {
  crm: 'CRM',
  contacts: {
    contact: 'Contact | Contacts',
    manager: 'Owner | Owners',
    destination: 'Destination',
    collapseAll: 'Collapse all',
    timeline: {
      timeline: 'Timeline',
      actions: {
        openInHistory: 'Open in history',
        playRecording: 'Play recording',
        transcription: 'Transcription',
      },
      status: {
        [TimelineTaskStatusEnum.STARTED]: 'Started',
        [TimelineTaskStatusEnum.MISSED]: 'Missed',
        [TimelineTaskStatusEnum.TRANSFERRED]: 'Transferred',
        [TimelineTaskStatusEnum.ENDED]: 'Ended',
        [TimelineTaskStatusEnum.SENT]: 'Sent',
        [TimelineTaskStatusEnum.RECEIVED]: 'Received',
      },
      eventType: {
        [WebitelContactsTimelineEventType.Call]: 'Call | Calls',
        [WebitelContactsTimelineEventType.Chat]: 'Chat | Chats',
        [WebitelContactsTimelineEventType.Email]: 'Email | Emails',
      },
      emails: {
        to: 'To',
        cc: 'CC',
        subject: 'Subject',
      },
    },
    communications: {
      communications: 'Communication option | Communication options',
      channel: 'Channel',
      destination: 'Destination',
      setAsPrimary: 'Set as primary',
      emails: {
        addTitle: 'Add the email',
        editTitle: 'Edit the email',
        dummy: 'There are no email addresses yet',
      },
      phones: {
        addTitle: 'Add the phone number',
        editTitle: 'Edit the phone number',
        dummy: 'There are no phone numbers yet',
      },
      messaging: {
        gateway: 'Gateway',
        provider: 'Provider ',
        username: 'Username',
        dummy: 'There are no messaging options yet',
        messengers: {
          [ChatGatewayProvider.TELEGRAM_BOT]: 'Telegram Bot',
          [ChatGatewayProvider.TELEGRAM_APP]: 'Telegram App',
          [ChatGatewayProvider.MESSENGER]: 'Meta',
          [ChatGatewayProvider.VIBER]: 'Viber',
          [ChatGatewayProvider.WEBCHAT]: 'Web chat',
          [ChatGatewayProvider.INFOBIP]: 'Infobip',
          [ChatGatewayProvider.CUSTOM]: 'Custom Chat Gateway',
        },
      },
    },
    attributes: 'Attribute | Attributes',
  },
  permissions: {
    read: 'Read',
    edit: 'Edit',
    delete: 'Delete',
    granteePopup: {
      title: 'Add grantee',
    },
    accessMode: {
      [AccessMode.ALLOW]: 'Allow',
      [AccessMode.FORBIDDEN]: 'Forbidden',
      [AccessMode.MANAGE]: 'Allow with delegation',
    },
  },
  startPage: {
    [CrmSections.CONTACTS]: {
      name: 'Contacts',
      text: 'In this section, you can work with your contacts: clients, customers etc.',
    },
    [CrmSections.CONFIGURATION]: {
      name: 'Configuration',
      text: 'In this section, you will set up the Case management process.',
    },
  },
  configuration: {
    [CrmConfigurationSections.LOOKUPS]: 'Lookups',
    [CrmConfigurationSections.CONTACT_GROUPS]: 'Contact groups',
  },

  validation: {
    email: 'Should look email-like',
    required: 'This field is required',
    sameAs: 'Incorrect password',
    gatewayHostValidator: 'Should look like IPv4 or FQDN',
    ipValidator: 'Should look like IPv4',
    macValidator: 'Should look like MAC',
    minValue: 'Value should be at least',
    maxValue: 'Value should be not much',
    numeric: 'Should be numeric',
    requiredArrayValue: 'Array should not be empty',
    isPositiveValue: 'Value should be positive number',
    cron: 'Invalid cron expression',
  },

  objects: {
    all: 'All {entity}',
    administration: 'Administration',
    general: 'General',
    new: 'New',
    add: 'Add',
    create: 'Create',
    read: 'Read',
    edit: 'Edit',
    delete: 'Delete',
    save: 'Save',
    saved: 'Saved',
    saveAs: 'Save as',
    close: 'Close',
    next: 'Next',
    back: 'Back',
    change: 'Change',
    name: 'Name',
    title: 'Title',
    description: 'Description',
    user: 'User',
    users: 'Users',
    action: 'Action',
    allow: 'Allow',
    password: 'Password',
    history: 'History',
    copy: 'Copy',
    copied: 'Copied to clipboard!',
    createdAt: 'Created',
    createdBy: 'Created by',
    importCSV: 'Import CSV',
    online: 'Online',
    offline: 'Offline',
    on: 'On',
    off: 'Off',
    ok: 'Ok',
    enabled: 'Enabled',
    status: 'Status',
    from: 'From',
    to: 'To',
    importJSON: 'Import JSON',
    addNew: 'Add new',
    provider: 'Provider',
    default: 'Default',
    service: 'Service',
    tts: 'Text-to-Speech',
    stt: 'Speech-to-Text',
    key: 'Key',
    ID: 'ID',
    email: 'Email address',
    updatedAt: 'Modified',
    emptyWorkspace: 'There are no records yet',
    emptyResultSearch: 'Your search yielded no results',
    deleteConfirmation: {
      title: 'Confirm deletion',
      askingAlert:
        'Are you sure you want to delete {count} item? | Are you sure you want to delete {count} items?',
      undoneActionAlert: 'This action cannot be undone.',
      deleteAll: 'ALL',
    },
    generalInfo: 'General info',
    objectHeader: {},
    permissions: {
      permissions: 'Permissions',
      permissionsRole: 'Role | Roles',
      allRoles: 'All roles',
      searchPlaceholder: 'role ..',
      roles: {
        permissions: {
          permissions: 'Role permission | Role permissions',
          add: 'Add',
          delete: 'Delete',
          read: 'Select',
          write: 'Update',
          eavesdropCall: 'Eavesdrop call',
          playbackRecordFile: 'Playback record file',
          exportDataGrid: 'Export data grid',
          viewCdrPhoneNumbers: 'View CDR phone numbers',
          manageUserRoles: 'Manage user roles',
          manageUserLicense: 'Manage user license',
          changeUserPassword: 'Change user password',
          systemSetting: 'Manage system configurations',
          addDescription: 'Grants permission to create any objects',
          deleteDescription: 'Grants permission to remove any objects',
          readDescription: 'Grants permission to select any objects',
          writeDescription: 'Grants permission to modify any objects',
          eavesdropCallDescription: 'Grants permission to eavesdrop on an active conversation',
          playbackRecordFileDescription: 'Grants permission to playback call-record files',
          exportDataGridDescription: 'Grants permission to export data grid to a file',
          viewCdrPhoneNumbersDescription: 'View CDR phone numbers',
          manageUserRolesDescription: 'Grants permission to manage a set of user roles',
          manageUserLicenseDescription: 'Grants permission to manage a set of user license',
          changeUserPasswordDescription: 'Grants permission to change the users password',
          systemSettingDescription:
            'Grants permission to access and manage the Configuration section',
          schemeVariables: 'Manage global variables',
          schemeVariablesDescription:
            'Grants permission to access and manage the Global variables section',
        },
        addPermission: 'Add role permission',
        usage: 'Usage',
        applicationsAccess: {
          applicationsAccess: 'Application access | Applications access',
          access: 'Access',
        },
      },
      object: {
        object: 'Objects',
        allObjects: 'All objects',
        ObAC: 'Managed by operations',
        RbAC: 'Managed by records',
        operations: 'Operations',
        searchPlaceholder: 'object ..',
        newPermissionRole: 'New grantee',
        rbacDefault: 'Default Record based Access',
        grantor: 'Grantor',
        grantee: 'Grantee',
        create: 'Create',
        delete: 'Delete',
        accessMode: {
          1: 'Forbidden',
          2: 'Allow',
          3: 'Allow with delegation',
        },
      },
    },
    routing: {
      routing: 'Routing',
      ip: 'IP',
      protocol: 'Protocol',
      port: 'Port',
      configuration: 'Configuration',
      schema: 'Flow schema',
      json: 'JSON',

      flow: {
        flow: 'Flow schema | Flow schemas',
        allFlowSchemas: 'All flow schemas',
        createFlowSelectionPopup: 'Create new flow',
        createNew: 'Create new?',
        editor: 'Editor',
        diagram: {
          diagram: 'Diagram',
          description: 'Create new flow using Webitel Flow Diagram tool',
        },
        code: {
          code: 'Code',
          description: 'Create new flow using JSON-schema in code editor',
        },
        askingAlert: 'Do you want to save the changes you made to "{name}" ?',
      },

      dialplan: {
        dialplan: 'Dialplans',
        dialplanRules: 'Dialplan rules',
        pattern: 'Destination number',
        dialplanRule: 'Dialplan rule',
        position: 'Position',
      },

      chatplan: {
        chatplan: 'Chatplan | Chatplans',
        allChatplans: 'All chatplans',
      },

      gateways: {
        gateways: 'Gateway | Gateways',
        allGateways: 'All gateways',
        trunkingGateway: 'Trunking gateway',
        registerGateway: 'Register gateway',
        stateSuccess: 'Success',
        stateFailed: 'Failed',
        stateProgress: 'In progress',
        stateNonreg: 'Not registered',
        proxy: 'Proxy',
        searchPlaceholder: 'gateway search...',
        host: 'Host',
        trunkingACLTitle: 'Access Control',
        trunkingACL: 'Trunking access control list',
        hostnameTrunking: 'Server/Gateway Hostname or IP',
        hostnameRegister: 'Registrar/Server/Gateway Hostname or IP',
        expire: 'Expire',
        authID: 'Username',
        account: 'Account',
        outboundProxy: 'Outbound Proxy Hostname or IP',
        newGateway: 'New gateway',
        newGatewayDescription: 'New gateway description',
        SIPregistrations: 'SIP Registration',
        SIPregistrationsDescription: 'SIP registration description',
        SIPtrunking: 'SIP Trunking',
        SIPtrunkingDescription: 'SIP trunking description',
      },
      chatGateways: {
        templates: {
          templates: 'Templates',
          title: "Workspace member's name",
          close: 'Chat complete message',
          join: 'Agent joining message',
          left: 'Agent disconnection message',
        },
        chatGateways: 'Chat gateway | Chat gateways',
        allChatGateways: 'All chat gateways',
        telegramBot: {
          telegramBot: 'Telegram Bot',
        },
        telegramApp: {
          telegramApp: 'Telegram App',
          signedAs: "You're signed as",
          joinTelegram: 'Sign in to Telegram',
          metadata: {
            apiId: 'API id',
            apiHash: 'API hash',
          },
        },
        infobip: {
          infobip: 'Infobip',
        },
        messenger: {
          meta: 'Meta',
          addOrRemovePages: 'Add or remove pages',
          accounts: 'Accounts',
          metadata: {
            clientId: 'App ID',
            clientSecret: 'App Secret',
          },
          facebook: {
            pages: 'Facebook pages',
            subscription: 'Webhook subscription',
          },
          instagram: {
            instagram: 'Instagram',
            comments: 'Track comments',
            mentions: 'Track mentions',
          },
          whatsapp: {
            whatsapp: 'Whatsapp',
            token: 'Token',
            status: 'Status',
            number: 'Phone number',
            review: 'Review',
          },
        },
        viber: {
          viber: 'Viber',
          style: {
            style: 'Style',
            btnBackColor: 'Button background color',
            btnFontColor: 'Button font color',
          },
        },
        webchat: {
          webchat: 'Web chat',
          copyCode: 'Copy code for site',
          copyCodeHint:
            'You must regenerate and reinsert Widget code to website each time after Widget settings modification',
          metadata: {
            mediaMaxSize: 'Max media size (Mb)',
          },
          view: {
            view: 'View',
            borderRadius: 'Button Shape',
            language: 'Language',
            position: 'Position',
            btnColor: 'Button Color',
            logoUrl: 'Logo URL',
            logoHint: "Supported logo format is 'JPEG' or 'PNG', 24x24px",
            rounded: 'Rounded',
            square: 'Square',
            right: 'Right',
            left: 'Left',
            static: 'Static',
          },
          recaptcha: {
            recaptcha: 'reCAPTCHA',
            sitekey: 'Site key',
            secret: 'Secret key',
            threshold: 'Threshold',
            showFlag: 'Show reCAPTCHA badge',
          },
          chat: {
            chat: 'Chat',
            openTimeout: 'Open Timeout',
            openTimeoutSec: 'Open Timeout Sec',
          },
          appointment: {
            appointment: 'Appointment',
            days: 'Days',
            availableAgents: 'Available agents',
            showEmailField: 'Show email field',
            showMessageField: 'Show message field',
            resultPageText: 'Result page text',
            headingText: 'Heading text',
            subheadingText: 'Subheading text',
            showDefaultHeading: 'Show default heading and subheading on result page',
          },
          alternativeChannels: {
            alternativeChannels: 'Alternative Channels',
            title: 'Messaging channels',
            email: 'Email',
            whatsapp: 'WhatsApp',
            telegram: 'Telegram',
            messenger: 'Messenger',
          },
          call: {
            title: 'Online call',
            url: 'WebSocket Endpoint',
          },
        },
        customChat: {
          customChat: 'Custom Chat',
          customChatGateway: 'Custom Chat Gateway',
          appSecretHint: 'Altering this field will interrupt the integration',
          metadata: {
            appSecret: 'App Secret',
            callback: 'Callback',
          },
        },
        uri: 'URI',
        newChatGateway: 'New chat gateway',
        metadata: {
          apiKey: 'Api Key',
          number: 'Number',
          baseUrl: 'Base URL',
          sendApi: 'Send API',
          allowOrigin: 'Allow Origin',
          readTimeout: 'Read Timeout (sec)',
          writeTimeout: 'Write Timeout (sec)',
          handshakeTimeout: 'Handshake Timeout (sec)',
          messageSize: 'Message Size max (bytes)',
          botName: 'Bot Name',
          eventTypes: 'Event Types',
          telegramToken: 'Telegram BOT API Token',
          messengerApiUrl: 'Messenger API URL',
        },
      },

      callflow: {
        callflow: 'Callflow',
      },
    },
    pagination: {
      rowsPerPage: 'Rows per page',
    },
  },

  lookups: {
    lookups: 'Lookups',
    contactGroups: {
      contactGroups: 'Contact groups',
      groups: 'Groups',
      crm: 'CRM',
      configurations: 'Configurations',
    }
  },

  errorPages: {
    goToHome: 'Go to Home page',
    page403: {
      title: 'Access denied',
      text: 'Sorry, you have not enough privileges to see this page.',
    },
    page404: {
      title: "Looks like you're lost",
      text: "Sorry, we can't find the page you want.",
    },
  },

  iconHints: {
    upload: 'Upload',
    reload: 'Refresh table',
    edit: 'Edit',
    delete: 'Delete',
    deleteAll: 'Delete all items',
    deleteSelected: 'Delete {count} selected items',
    deleteFiltered: 'Delete all filtered items',
    generate: 'Generate',
    add: 'Add',
    history: 'History',
    download: 'Download',
    downloadAll: 'Download all',
    draggable: 'Draggable',
    play: 'Play',
    pause: 'Pause',
    resume: 'Resume',
    close: 'Close',
    change: 'Change',
    volume: 'Volume',
    stop: 'Stop',
    members: 'Members',
    moveUp: 'Move up',
    moveDown: 'Move down',
    nextPage: 'Next page',
    prevPage: 'Previous page',
    expand: 'Expand',
    collapse: 'Collapse',
  },

  errors: {
    invalidJson: 'JSON is invalid',
  },

  reusable: {
  },
};
